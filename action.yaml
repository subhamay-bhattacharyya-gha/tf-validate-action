name: "Terraform Validation and Formatting Checks"
description: "A composite GitHub Action that performs Terraform format (fmt) and configuration validation."

inputs:
  terraform-dir:
    description: "Relative path to the directory containing Terraform configuration files (e.g., 'tf', 'infrastructure')."
    required: false
    type: string
    default: "tf"

  release-tag:
    description: "Git release tag to check out. If omitted, the latest commit on the default branch is used."
    required: false
    type: string
    default: ""

  ci-pipeline:
    description: "Set to 'true' to include the commit SHA in the Terraform state key (suitable for CI/CD). Use 'false' for static state keys."
    required: false
    type: string
    default: "false"

  s3-bucket:
    description: "Name of the S3 bucket used as the backend for storing the Terraform state file."
    required: true
    type: string

  s3-region:
    description: "AWS region where the S3 backend bucket is located (e.g., us-east-1, eu-west-1)."
    required: true
    type: string

  soft-fail:
    description: "Set to 'true' to allow the workflow to continue even if Terraform format or validation fails. Use 'false' to enforce strict validation."
    required: false
    type: string
    default: "true"

outputs:
  valid:
    description: "Set to 'true' if validation passed, 'false' if it failed."

runs:
  using: "composite"
  steps:
    - name: Set Checkout Ref
      id: set-ref
      shell: bash
      run: |
        if [[ -n "${{ inputs.release-tag }}" ]]; then
          echo "ref=${{ inputs.release-tag }}" >> $GITHUB_OUTPUT
        else
          echo "ref=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        fi

    - name: Checkout Repo
      id: checkout
      uses: actions/checkout@v5
      with:
        ref: ${{ steps.set-ref.outputs.ref }}

    - name: Setup Terraform
      id: setup-terraform
      uses: hashicorp/setup-terraform@v3

    - name: Generate Terraform State Key
      id: generate-tfstate-key
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        if [[ "${{ inputs.ci-pipeline }}" == "true" ]]; then
          state_key="${{ github.repository }}/${{ github.sha }}/terraform.tfstate"
        else
          state_key="${{ github.repository }}/terraform.tfstate"
        fi
        echo "s3_key=$state_key" >> $GITHUB_OUTPUT

    - name: Initialize Terraform with S3 Backend
      id: terraform-init-s3
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ inputs.s3-bucket }}" \
          -backend-config="key=${{ steps.generate-tfstate-key.outputs.s3_key }}" \
          -backend-config="region=${{ inputs.s3-region }}" \
          -backend-config="encrypt=true" \
          -backend-config="use_lockfile=true"

    - name: Check Terraform Formatting (FMT)
      id: terraform-fmt-check
      shell: bash
      working-directory: "${{ github.workspace }}/${{ inputs.terraform-dir }}"
      run: |
        if terraform fmt -check -recursive; then
          echo "✅ Terraform FMT check passed"
          echo "### ✅ Terraform FMT check passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Terraform code is not properly formatted"
          echo "### ❌ Terraform fmt check failed" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ inputs.soft-fail }}" == "true" ]]; then
            echo "::warning::Terraform fmt check failed (soft fail enabled)"
          else
            exit 1
          fi
        fi

    - name: Validate Terraform Configuration
      id: terraform-validate
      shell: bash
      working-directory: "${{ github.workspace }}/${{ inputs.terraform-dir }}"
      run: |
        if terraform validate -no-color; then
          echo "✅ Terraform validation passed"
          echo "### ✅ Terraform validation passed" >> $GITHUB_STEP_SUMMARY
          echo "valid=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Terraform validation failed"
          echo "### ❌ Terraform validation failed" >> $GITHUB_STEP_SUMMARY
          echo "valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi
