name: "Terraform Validate"
description: A composite GitHub Action to check formatting and validate Terraform configuration.

inputs:
  release-tag:
    description: 'Optional release tag to checkout'
    required: false
    type: string
    default: ''

  terraform-dir:
    description: Directory containing Terraform code
    required: false
    default: "tf"

  s3-bucket:
    description: "S3 bucket for Terraform backend"
    required: true

  s3-region:
    description: "AWS region where the S3 bucket is located"
    required: true

  dynamodb-table:
    description: "DynamoDB table name for state locking"
    required: true

  soft-fail:
    description: Continue workflow even if validation fails
    required: false
    default: "false"

outputs:
  valid:
    description: "true if validation passed, false if failed"

runs:
  using: "composite"
  steps:
    - name: Checkout repo
      id: checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.release-tag || github.ref_name }}   

    - name: Setup Terraform
      id: setup-terraform
      uses: hashicorp/setup-terraform@v3

    - name: Compute Backend Key from Repository Name
      id: key
      shell: bash
      run: |
        if [[ "${{ inputs.ci-pipeline }}" == "true" ]]; then
          state_key="${{ github.repository }}/${{ github.sha }}/terraform.tfstate"
        else
          state_key="${{ github.repository }}/terraform.tfstate"
        fi
        echo "s3_key=$state_key" >> $GITHUB_OUTPUT

    - name: Terraform Init with S3 Backend
      id: tf-init
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ inputs.s3-bucket }}" \
          -backend-config="key=${{ steps.key.outputs.s3_key }}" \
          -backend-config="region=${{ inputs.s3-region }}" \
          -backend-config="encrypt=true" \
          -backend-config="dynamodb_table=${{ inputs.dynamodb-table }}"

    - name: Terraform FMT Check
      id: fmt-check
      shell: bash
      working-directory: "${{ github.workspace }}/${{ inputs.terraform-dir }}"
      run: |
        # set -e
        if terraform fmt -check -recursive; then
          echo "✅ Terraform FMT check passed"
          echo "### ✅ Terraform FMT check passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Terraform code is not properly formatted"
          echo "### ❌ Terraform fmt check failed" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ inputs.soft-fail }}" == "true" ]]; then
            echo "::warning::Terraform fmt check failed (soft fail enabled)"
          else
            exit 1
          fi
        fi

    - name: Terraform Validate
      id: validate
      shell: bash
      working-directory: "${{ github.workspace }}/${{ inputs.terraform-dir }}"
      run: |
        # set -e
        # terraform init -input=false
        if terraform validate -no-color; then
          echo "✅ Terraform validation passed"
          echo "### ✅ Terraform validation passed" >> $GITHUB_STEP_SUMMARY
          echo "valid=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Terraform validation failed"
          echo "### ❌ Terraform validation failed" >> $GITHUB_STEP_SUMMARY
          echo "valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi
